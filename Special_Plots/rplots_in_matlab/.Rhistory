biocLite("easyRNASeq")
source("http://bioconductor.org/biocLite.R")
biocLite("easyRNASeq")
library("easyRNASeq")
utils:::menuInstallLocal()
library("easyRNASeq")
install.packages("genomeIntervals")
biocLite("genomeIntervals")
library("easyRNASeq")
install.packages("genomeIntervals")
update.packages("genomeIntervals")
upgrade.packages("genomeIntervals")
update.packages("genomeIntervals")
library("easyRNASeq")
quit()
library("DEXSeq")
data("pasillaExons", package = "pasilla")
source("http://www.bioconductor.org/biocLite.R")
biocLite("pasilla")
data("pasillaExons", package = "pasilla")
pasillaExons
head(fData(pasillaExons)[, c(1, 2, 9:12)])
head(fData(pasillaExons)
;
head(fData(pasillaExons))
head(fData(pasillaExons))
head(fData(pasillaExons)[, c(1, 2, 9:12)])
fData(pasillaExons)
fData(pasillaExons)[, c(1, 2, 9:12)]
Data(pasillaExons)[, c(1, 2, 9:12)]
fData(pasillaExons)[, c(1, 2, 9:12)]
table(table(geneIDs(pasillaExons)))
table(geneIDs(pasillaExons))
table(table(geneIDs(pasillaExons)))
geneIDs(pasillaExons))
geneIDs(pasillaExons)
table(table(geneIDs(pasillaExons)))
### R code from vignette source 'vignettes/DEXSeq/inst/doc/DEXSeq.Rnw'
###################################################
### code chunk number 1: options
###################################################
options(digits=3)
###################################################
### code chunk number 2: start
###################################################
library("DEXSeq")
###################################################
### code chunk number 3: datapasilla
###################################################
data("pasillaExons", package="pasilla")
###################################################
### code chunk number 4: installpasilla (eval = FALSE)
###################################################
## source("http://www.bioconductor.org/biocLite.R")
## biocLite("pasilla")
###################################################
### code chunk number 5: pData
###################################################
design(pasillaExons)
###################################################
### code chunk number 6: fData
###################################################
head(fData(pasillaExons)[,c(1,2,9:12)])
tg = table(geneIDs(pasillaExons))
tt = table(tg)
stopifnot(tt["36"]==1, tt["16"]==3)
tg
tt
table(table(geneIDs(pasillaExons)))
pasillaExons <- estimateSizeFactors(pasillaExons)
pasillaExons
sizeFactors(pasillaExons)
pasillaExons <- estimateDispersions(pasillaExons)
head(fData(pasillaExons)$dispersion_CR_est)
head( modelFrameForGene( pasillaExons, "FBgn0010909" ) )
estimateExonDispersionsForModelFrame( modelFrameForGene( pasillaExons, "FBgn0010909" ) )
pasillaExons <- estimateDispersions(pasillaExons)
head(fData(pasillaExons))
pasillaExons@dispFitCoefs
head(modelFrameForGene(pasillaExons, "FBgn0010909"))
source("http://bioconductor.org/biocLite.R")
biocLite("DEXSeq")
source("http://bioconductor.org/biocLite.R")
biocLite("DEXSeq")
library("DEXSeq")
library("DEXSeq")
q();
library("DEXSeq")
source("http://www.bioconductor.org/biocLite.R")
biocLite("pasilla")
data("pasillaExons", package="pasilla")
ecs <- newExonCountSet(
countData=counts(pasillaExons),
design=design(pasillaExons),
geneIDs=geneIDs(pasillaExons),
exonIDs=exonIDs(pasillaExons))
ecs
design(pasillaExons)
table(table(geneIDs(pasillaExons)))
pasillaExons <- estimateSizeFactors(pasillaExons)
sizeFactors(pasillaExons)
head(modelFrameForGene(pasillaExons, "FBgn0010909"))
estimateExonDispersionsForModelFrame(modelFrameForGene(pasillaExons,
+ "FBgn0010909"))
pasillaExons <- estimateDispersions(pasillaExons)
pasillaExons <- fitDispersionFunction(pasillaExons)
head(fData(pasillaExons)$dispBeforeSharing)
source("http://www.bioconductor.org/biocLite.R")
biocLite("easyRNASeq")
library(BSgenome.Hsapiens.UCSC.hg19)
biocLite(BSgenome.Hsapiens.UCSC.hg19)
biocLite(BSgenome)
biocLite("BSgenome.Hsapiens.UCSC.hg19")
library(BSgenome.Hsapiens.UCSC.hg19)
chr.sizes=as.list(seqlengths(Hsapiens))
chr.size
chr
chr.sizes
library(edgeR)
source("http://bioconductor.org/biocLite.R")
biocLite("edgeR")
q()
source("http://bioconductor.org/biocLite.R")
?BiocUpgrade
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
biocLite("edgeR")
biocLite("deseq")
biocLite("DEseq")
biocLite("DESeq")
biocLite("bayesR")
biocLite("EL")
library(EL)
EL.plot
quit()
utils:::menuInstallPkgs()
library(hexbin)
h <- hexbin(rnorm(10000),rnorm(10000))
plot(h, colramp= BTY)
## looks better if you shave the tails:
plot(h, colramp= function(n){LinOCS(n,beg=15,end=225)})
h
mixdata <-
data.frame(x = c(rnorm(5000),rnorm(5000,4,1.5)),
y = c(rnorm(5000),rnorm(5000,2,3)),
a = gl(2, 5000))
hexbinplot(y ~ x, mixdata, aspect = 1,
trans = sqrt, inv = function(x) x^2)
hexbinplot(y ~ x | a, mixdata)
hexbinplot(y ~ x | a, mixdata, style = "lattice",
xbnds = "data", ybnds = "data")
hexbinplot(y ~ x | a, mixdata, style = "nested.centroids")
hexbinplot(y ~ x | a, mixdata, style = "nested.centroids",
border = FALSE, type = c("g", "smooth"))
x <- rnorm(10000)
y <- rnorm(10000,x,x)
hbin <- hexbin(x,y)
hvp <- plot(hbin,type="n")
pushHexport(hvp$plot,clip="on")
hexGraphPaper(hbin,border=grey(.8))
grid.hexagons(hbin)
x <- rnorm(10000)
y <- rnorm(10000,x,x)
hbin <- hexbin(x,y)
hvp <- plot(hbin,type="n")
pushHexport(hvp$plot,clip="on")
hexGraphPaper(hbin,border=grey(.8))
grid.hexagons(hbin)
hbin
## boxplot of smoothed counts
x <- rnorm(10000)
y <- rnorm(10000)
bin <- hexbin(x,y)
erodebin <- erode(smooth.hexbin(bin))
hboxplot(erodebin)
hboxplot(erodebin, density = c(32,7), border = c(2,4))
hp <- hboxplot(erodebin, density = c(-1,17),
main = "hboxplot(erode*(smooth*(.)))")
pushHexport(hp)
grid.points(x[1:10], y[1:10])# just non-sense to show the principle
popViewport()
# High Density Scatterplot with Binning
library(hexbin)
x <- rnorm(1000)
y <- rnorm(1000)
bin<-hexbin(x, y, xbins=50)
plot(bin, main="Hexagonal Binning")
# High Density Scatterplot with Color Transparency
pdf("c:/scatterplot.pdf")
x <- rnorm(1000)
y <- rnorm(1000)
plot(x,y, main="PDF Scatterplot Example", col=rgb(0,100,0,50,maxColorValue=255), pch=16)
dev.off()
# 3D Scatterplot with Coloring and Vertical Lines
# and Regression Plane
library(scatterplot3d)
attach(mtcars)
s3d <-scatterplot3d(wt,disp,mpg, pch=16, highlight.3d=TRUE,
type="h", main="3D Scatterplot")
fit <- lm(mpg ~ wt+disp)
s3d$plane3d(fit)
install.packages(c("dynamicTreeCut", "cluster", "flashClust", "Hmisc", "reshape", "foreach", "doParallel") )
source("http://bioconductor.org/biocLite.R")
biocLite("impute")
boxcox
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
use dglm
use('dglm')
boxcox
require(dglm)
require(MASS)
boxcox
a<-c(1, 2, 3);
a
boxcox(a)
q()
library(car)   # leveneTest(y,g)
require(dglm)
g<-c(3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1);
y<-c(20.99,28.77,4.21,22.94,19.68,9.92,15.16,19.82,39.24,34.38,9.67,35.98,22.12,17.39,22.05,16.54,17.02,26.70,26.22,26.27,21.79,10.52,22.07,27.55,20.70,23.97,22.13,15.95,19.53,13.04,23.10,10.88,11.35,12.91,0.10,26.40,19.72,13.24,25.99,7.50,17.15,16.32,19.68,19.64,12.58,17.59,16.78,21.53,24.33,24.42,12.58,18.23,10.48,11.08,17.72,26.96,13.15,19.99,16.41,24.47,11.23,17.96,21.08,24.37,27.03,18.28,8.82,13.31,11.40,31.87,14.07,22.25,16.61,23.10,13.18,9.35,9.23,20.69,16.70,16.59,26.28,19.52,18.95,27.29,12.94,21.95,22.78,16.30,19.06,10.77,10.88,18.39,22.10,33.28,13.76,18.89,17.27,6.17,15.13,7.00,22.81,12.44,18.37,14.50,19.59,14.16,20.71,22.20,28.04,16.60,4.94,12.73,25.89,11.33,23.53,18.51,26.39,6.00,16.58,10.52,35.21,22.72,26.04,11.42,14.95,16.13,24.36,16.10,21.97,5.45,15.64,12.82,8.30,20.81,19.46,17.97,9.76,24.53,19.87,15.97,17.90,16.19,7.26,16.05,12.78,11.89,10.83,14.56,5.75,23.55,20.89,17.65,17.56,12.98,23.88,16.97,13.48,25.87,16.42,14.23,16.00,12.68,11.04,32.92,27.70,19.61,10.22,12.57,16.
71,22.51,9.77,3.79,9.07,19.77,20.11,20.48,16.98,18.87,14.91,22.94,12.32,19.59,14.37,16.43,19.98,21.92,13.30,22.81,20.41,17.49,16.98,16.90,16.55,17.86,17.97,21.07,23.87,19.63,16.93,20.27,18.50,13.65,21.56,18.99,18.31,19.83,18.81,14.00,17.12,17.18,15.64,24.49,14.26,15.83,14.92,13.07,17.00,16.67,23.89,16.77,13.51,24.18,22.70,16.85,11.74,15.99,17.14,18.87,16.72,19.54,19.33,12.76,13.97,14.80,15.73,16.48,17.82,5.65,15.94,22.74,13.50,21.50,19.17,17.65,18.50,11.51,17.43,24.18,18.16,17.93,14.83,17.64,18.70,19.47,16.27,16.82,25.86,8.73,26.68,19.12,21.77,11.11,15.41,16.65,19.46,11.08,19.65,12.91,18.03,20.38,19.07,22.10,21.79,15.16,18.79,13.99,12.48,21.47,17.77,17.55,21.41,20.14,19.17,22.77,21.48,18.72,15.00,15.16,22.53,11.32,17.67,9.97,21.85,21.21,17.77,17.48,7.82,20.09,9.00,8.49,18.09,13.97,19.41,20.47,21.20,15.00,19.56,18.17,21.07,19.91,21.36,17.24,17.18,21.80,9.27,15.75,12.68,16.24,20.36,21.07,13.71,15.88,18.31,16.60,18.97,19.37,14.05,17.06,9.24,22.35,15.25,12.95,16.75,12.05,17.68,15.52,26.48
,22.32,7.78,19.53,12.17,16.75,18.42,20.76,16.67,24.07,15.84,19.08,20.42,18.11,21.29,19.06,14.63,10.54,25.20,15.35,18.18,20.02,18.22,14.15,15.89,17.27,23.68,14.32,20.90,19.00,16.83,13.54,16.63,17.42,11.89,18.53,14.48,17.39,19.11,14.15,16.61,19.17,10.42,21.91,27.46,21.60,16.50,19.48,13.62,25.28,21.53,20.92,14.26,19.05,15.53,16.52,15.49,13.66,14.13,16.93,10.97,20.20,17.29,20.56,18.84,19.74,11.83,13.68,15.98,18.20,22.28,16.61,22.81,19.67,22.46,18.27,15.14,11.84,18.39,21.04,16.60,15.60,16.53,13.38,16.78,17.40,17.86,17.64,18.99,17.98,21.39,18.39,21.37,16.32,18.82,17.25,18.97,18.95,13.39,15.11,14.88,18.57,20.71,17.11,19.39,18.86,15.66,18.56,16.26,20.80,17.70,21.04,16.92,18.94,17.64,13.72,15.80,18.99,17.66,15.53,16.51,18.26,15.78,19.72,16.48,21.38,15.61,18.16,14.72,16.32,16.58,18.57,19.65,18.37,17.02,19.40,19.36,18.01,18.91,18.59,15.79,19.28,16.45,16.56,18.12,17.15,17.50,18.96,19.86,17.37,18.42,17.29,18.22,18.65,16.53,18.32,18.97,17.95,21.23,16.55,16.29,14.27,19.59,19.50);
dglm.Pvalues <- function(dglm.fit){
P.disp = anova.dglm(dglm.fit)$Adj.P[2]
P.mean = summary(dglm.fit)$coef[2,4]
list(P.mean=P.mean, P.disp=P.disp)
}
d2.fit <- dglm(formula = y~g, dformula = ~g, family = gaussian)
P.values <- dglm.Pvalues( d2.fit )
P.values
fkt <-fligner.test(y,g)
fkp <- fkt$p.value
fkp
Pres <- list(P.values,fkp);
write.table(Pres, file="outfile", sep = "\t", col.names = FALSE, row.names = FALSE, qmethod = "double",append=TRUE)
dir()
print(Pres)
print(P.values)
print(fkp)
q()
a<-c(3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1);
y<-c(20.99,28.77,4.21,22.94,19.68,9.92,15.16,19.82,39.24,34.38,9.67,35.98,22.12,17.39,22.05,16.54,17.02,26.70,26.22,26.27,21.79,10.52,22.07,27.55,20.70,23.97,22.13,15.95,19.53,13.04,23.10,10.88,11.35,12.91,0.10,26.40,19.72,13.24,25.99,7.50,17.15,16.32,19.68,19.64,12.58,17.59,16.78,21.53,24.33,24.42,12.58,18.23,10.48,11.08,17.72,26.96,13.15,19.99,16.41,24.47,11.23,17.96,21.08,24.37,27.03,18.28,8.82,13.31,11.40,31.87,14.07,22.25,16.61,23.10,13.18,9.35,9.23,20.69,16.70,16.59,26.28,19.52,18.95,27.29,12.94,21.95,22.78,16.30,19.06,10.77,10.88,18.39,22.10,33.28,13.76,18.89,17.27,6.17,15.13,7.00,22.81,12.44,18.37,14.50,19.59,14.16,20.71,22.20,28.04,16.60,4.94,12.73,25.89,11.33,23.53,18.51,26.39,6.00,16.58,10.52,35.21,22.72,26.04,11.42,14.95,16.13,24.36,16.10,21.97,5.45,15.64,12.82,8.30,20.81,19.46,17.97,9.76,24.53,19.87,15.97,17.90,16.19,7.26,16.05,12.78,11.89,10.83,14.56,5.75,23.55,20.89,17.65,17.56,12.98,23.88,16.97,13.48,25.87,16.42,14.23,16.00,12.68,11.04,32.92,27.70,19.61,10.22,12.57,16.
71,22.51,9.77,3.79,9.07,19.77,20.11,20.48,16.98,18.87,14.91,22.94,12.32,19.59,14.37,16.43,19.98,21.92,13.30,22.81,20.41,17.49,16.98,16.90,16.55,17.86,17.97,21.07,23.87,19.63,16.93,20.27,18.50,13.65,21.56,18.99,18.31,19.83,18.81,14.00,17.12,17.18,15.64,24.49,14.26,15.83,14.92,13.07,17.00,16.67,23.89,16.77,13.51,24.18,22.70,16.85,11.74,15.99,17.14,18.87,16.72,19.54,19.33,12.76,13.97,14.80,15.73,16.48,17.82,5.65,15.94,22.74,13.50,21.50,19.17,17.65,18.50,11.51,17.43,24.18,18.16,17.93,14.83,17.64,18.70,19.47,16.27,16.82,25.86,8.73,26.68,19.12,21.77,11.11,15.41,16.65,19.46,11.08,19.65,12.91,18.03,20.38,19.07,22.10,21.79,15.16,18.79,13.99,12.48,21.47,17.77,17.55,21.41,20.14,19.17,22.77,21.48,18.72,15.00,15.16,22.53,11.32,17.67,9.97,21.85,21.21,17.77,17.48,7.82,20.09,9.00,8.49,18.09,13.97,19.41,20.47,21.20,15.00,19.56,18.17,21.07,19.91,21.36,17.24,17.18,21.80,9.27,15.75,12.68,16.24,20.36,21.07,13.71,15.88,18.31,16.60,18.97,19.37,14.05,17.06,9.24,22.35,15.25,12.95,16.75,12.05,17.68,15.52,26.48
,22.32,7.78,19.53,12.17,16.75,18.42,20.76,16.67,24.07,15.84,19.08,20.42,18.11,21.29,19.06,14.63,10.54,25.20,15.35,18.18,20.02,18.22,14.15,15.89,17.27,23.68,14.32,20.90,19.00,16.83,13.54,16.63,17.42,11.89,18.53,14.48,17.39,19.11,14.15,16.61,19.17,10.42,21.91,27.46,21.60,16.50,19.48,13.62,25.28,21.53,20.92,14.26,19.05,15.53,16.52,15.49,13.66,14.13,16.93,10.97,20.20,17.29,20.56,18.84,19.74,11.83,13.68,15.98,18.20,22.28,16.61,22.81,19.67,22.46,18.27,15.14,11.84,18.39,21.04,16.60,15.60,16.53,13.38,16.78,17.40,17.86,17.64,18.99,17.98,21.39,18.39,21.37,16.32,18.82,17.25,18.97,18.95,13.39,15.11,14.88,18.57,20.71,17.11,19.39,18.86,15.66,18.56,16.26,20.80,17.70,21.04,16.92,18.94,17.64,13.72,15.80,18.99,17.66,15.53,16.51,18.26,15.78,19.72,16.48,21.38,15.61,18.16,14.72,16.32,16.58,18.57,19.65,18.37,17.02,19.40,19.36,18.01,18.91,18.59,15.79,19.28,16.45,16.56,18.12,17.15,17.50,18.96,19.86,17.37,18.42,17.29,18.22,18.65,16.53,18.32,18.97,17.95,21.23,16.55,16.29,14.27,19.59,19.50);
dglm.Pvalues <- function(dglm.fit){
P.disp = anova.dglm(dglm.fit)$Adj.P[2]
P.mean = summary(dglm.fit)$coef[2,4]
list(P.mean=P.mean, P.disp=P.disp)
}
##An example using dglm.Pvalues(.) with 500 simulated observations
set.seed(123)
require(dglm)
d.fit <- dglm( formula = y ~ a, dformula = ~ a )
P.values <- dglm.Pvalues( d.fit )
print( P.values )
boxcox(y)
require MASS
requires MASS
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
boxcox(y)
rl=lm(Volume~Height+Girth,trees)
plot(trees$Girth,rstandars(rl))
plot(trees$Girth,rstandars(r1))
plot(trees$Girth,rstandard(r1))
plot(trees$Girth,rstandard(rl))
Volume
Height
trees
boxcox(trees)
a
y
d=cbind(a,y)
d
boxcox(d)
boxcox(d$a)
d$a
d
d[,1]
d$a
r1=lm(Volume~Height+Girth,trees)
r2=lm(Volume^(1/3)~Height+Girth,trees)
window()plot(trees$Girth,rstandard(r2))plot(trees$Girth,rstandard(r2))
window()
windows()
plot(trees$Girth,rstandard(r2))
r1
trees$Girth
trees
# Program for testing if an SNP represents a synthetic association
# Written in R, http://cran.r-project.org/
#
# 21 Sept 2010
# Contact: Fumihiko Takeuchi, http://www.fumihiko.takeuchi.name
# Reference: Detection of common single nucleotide polymorphisms synthesizing quantitative trait association of rarer causal variants (submitted)
# Input:
# q: a vector representing quantitative trait value for each individual
# x: a vector representing genotype for each individual
# Testing synthetic association:
# Load the functions below, and try synthetic.test(q, x)
skewness.test = function(q, x) {
xlist = setdiff(x, NA);
chilist = rep(NA, length(xlist));
for (i in 1:length(xlist)) {
xi = xlist[i];
qxi = q[x==xi];
qxi = qxi[!is.na(qxi)];
chilist[i] = length(qxi) / 6 *
(sum((qxi - mean(qxi))^3)/length(qxi))^2 /
(sum((qxi - mean(qxi))^2)/length(qxi))^3
}
pchisq(sum(chilist), df=length(chilist), lower.tail=F)
}
bartlett.skewness.test = function(q, x) {
pbi = bartlett.test(q, x)$p.value;
psi = skewness.test(q, x);
pchisq(-2 * log(pbi * psi), df=4, lower.tail=F)
}
synthetic.test = function(q, x) {
#rank-based inverse normal transformation
c = 3/8;
qinr = (rank(q, ties.method="average") - c)/(sum(!is.na(q)) - 2 * c + 1);
qinr[is.na(q)] = NA;
qinr = qnorm(qinr);
print(paste("Heteroscedasticity p-value: ",
bartlett.test(qinr, x)$p.value));
print(paste("Skewness p-value: ",
skewness.test(qinr, x)));
print(paste("Combined p-value: ",
bartlett.skewness.test(qinr, x)));
}
synthetic.test(y,a)
bartlett.test(y,a)
bartlett.test(y, a)$p.value
bartlett.test(y, a)
bartlett.test(y, a)$p.value
bartlett.test(y, a)$p.value
synthetic.test(y,a)
q<-y
who
who()
box.cox(y)
load(car)
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallPkgs()
load(car)
load car
requires(car)
require(car)
box.cox(y)
bcPower(y)
bcPower(y,2)
y(1)
y[1]
y[1]^2
bcPower(y[1],2)
(y[1]^2-1)/2
q()
utils:::menuInstallPkgs()
require(GenABEL)
utils:::menuInstallPkgs()
require(GenABEL)
require(VarABEL)
require(VariABEL)
data(srdta
)
ls()
bt
qt1
clear all
clear()
srdta
gtdata(srdta)
a<-gtdata(srdta)
a
b<-phdata(srdta)
b
b$id
b[[1]]
b[[2]]
b
result1 <- var_test_gwaa(bt~qt1+qt2, genodata=gtdata(srdta), phenodata=phdata(srdta))
result1
result2 <- var_test_gwaa("bt", genodata=gtdata(srdta), phenodata=phdata(srdta))
result2
result2[[2]]
result2[[3]]
result2[[4]]
a[[1]]
a[[2]]
a[1]
a[2]
a[3]
a[4]
a[4]$nids
a[4][1]
a[4]srdta@phdata[1:10,]
srdta@phdata[1:10,]
srdta@gtdata[1:10,1:12]
srdta[1:10,1:12]
as.numeric(srdta@gtdata[1:12,1:10])
result2 <- var_test_gwaa("bt", genodata=gtdata(srdta), phenodata=phdata(srdta))
result2 <- var_test_gwaa("id", genodata=gtdata(srdta), phenodata=phdata(srdta))
result2 <- var_test_gwaa("sex", genodata=gtdata(srdta), phenodata=phdata(srdta))
result2 <- var_test_gwaa("qt1", genodata=gtdata(srdta), phenodata=phdata(srdta))
results2
result2
result2 <- var_test_gwaa("qt2", genodata=gtdata(srdta), phenodata=phdata(srdta))
result2
result2 <- var_test_gwaa("qt3", genodata=gtdata(srdta), phenodata=phdata(srdta))
result2
result2 <- var_test_gwaa("bt", genodata=gtdata(srdta), phenodata=phdata(srdta))
srdta[1:10,]
srdta[,1:1]
result2 <- var_test_gwaa("qt3", genodata=gtdata(srdta[,1:1]), phenodata=phdata(srdta[,1:1]))
result2
gtdata(srdta[,1:1])
as.numeric(gtdata(srdta[,1:1]))
as.numeric(phdata(srdta[,1:1]))
as.numeric(pndata(srdta[,1:1]))
result2
result2 <- var_test_gwaa("qt3", genodata=gtdata(srdta[,1:1]), phenodata=phdata(srdta[,1:1]))
srdta$qt3
srdta@qt3
phdata(srdta)@qt3
phdata(srdta)
phdata(srdta)[[3]]
phdata(srdta)$qt3
results2
result2
q()
source('~/.active-rstudio-document')
install.packages('ggplot2')
source('~/.active-rstudio-document')
install.packages('ggplot2')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
myd <- data.frame (X = c(1:12,1:12),
Y = c(8, 12, 13, 18,  22, 16, 24, 29,  34, 15, 8, 6,
9, 10, 12, 18, 26, 28, 28, 30, 20, 10, 9, 9),
group = rep (c("A-group", "B-group"), each = 12),
error = rep (c(2.5, 3.0), each = 12))
require(ggplot2)
require(grid)
# line and point plot
f1 = ggplot(data = myd, aes(x = X, y = Y, group = group) )  # lesion becomes a classifying factor
f2 <- f1 + geom_errorbar(aes(ymin = Y - error, ymax = Y + error), width=0.3) +
geom_line() + geom_point(aes(shape=group, fill=group), size=5)
f3 <- f2 +  scale_x_continuous("X (units)", breaks=1:12) +
scale_y_continuous("Y (units)", limits = c(0, 40), breaks=seq(0, 40, by = 5)) +
scale_shape_manual(values=c(24,21)) +
scale_fill_manual(values=c("white","black")) +
stat_abline(intercept=0, slope=0, linetype="dotted") +
annotate("text", x=11, y=10, label="X") +
theme_bw()
optns <- theme (
plot.title = element_text(face="bold", size=14),
axis.title.x = element_text(face="bold", size=12),
axis.title.y = element_text(face="bold", size=12, angle=90),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = c(0.2,0.8),
legend.title = element_blank(),
legend.text = element_text(size=12),
legend.key.size = unit(1.5, "lines"),
legend.key = element_blank()
)
f3 +  ggtitle ( "MY awsome plot for publication") + optns
install.packages('DEXSeq')
install.packages('DEXseq')
source("http://bioconductor.org/biocLite.R")
biocLite("DEXSeq")
source("http://bioconductor.org/biocLite.R")
biocLite("DEXSeq")
source("http://bioconductor.org/biocLite.R")
    biocLite("DEXSeq")
q()
install.packages('beewarm')
install.packages('beeswarm')
xv <-data.frame(A=c(1:10)+rnorm (10, 0,1) , B=c(2:11)+rnorm(10, 0, 1))
xv
setwd('C:\myprojects\mymatlabcentral\rplots')
setwd('C:/myprojects/mymatlabcentral/rplots')
source('Data.R')
require(beeswarm)
tiff(filename="output.tif")
beeswarm(X ~ G, method = 'swarm', pch = 16, pwcol = as.numeric(c),
         xlab = '', ylab = 'xv', labels = c('bimodal', 'uniform'))
dev.off()
beeswarm(X ~ G, method = 'swarm', pch = 16, pwcol = as.numeric(c),
         xlab = '', ylab = 'xv', labels = c('bimodal', 'uniform'))
c
levels(c)
levels('a')
data(breast)
breast2 <- breast[order(breast$event_survival, breast$ER),]
breast$ER
legend('topright', legend = c, title = 'ER', pch = 16, col = 1:2)
legend('topright', legend = mode(c), title = 'ER', pch = 16, col = 1:2)
legend('topright', legend = [1 2], title = 'ER', pch = 16, col = 1:2)
legend('topright', legend = (1 2), title = 'ER', pch = 16, col = 1:2)
legend('topright', legend = [1, 2], title = 'ER', pch = 16, col = 1:2)
q()
